"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"demarrer-bow-framework","metadata":{"permalink":"/blog/demarrer-bow-framework","source":"@site/blog/2023-01-05-demarrer-bow-framework.mdx","title":"Demarrer Bow Framework","description":"Demarrer Bow Framework","date":"2023-01-05T00:00:00.000Z","formattedDate":"5 janvier 2023","tags":[{"label":"bowphp","permalink":"/blog/tags/bowphp"},{"label":"php","permalink":"/blog/tags/php"},{"label":"framework","permalink":"/blog/tags/framework"}],"readingTime":6.015,"hasTruncateMarker":true,"authors":[{"name":"Franck DAKIA","title":"Principal maintainer","url":"https://github.com/papac","email":"hello@papac.dev","imageURL":"https://avatars.githubusercontent.com/u/9353811?v=4","key":"papac"}],"frontMatter":{"title":"Demarrer Bow Framework","description":"Demarrer Bow Framework","slug":"demarrer-bow-framework","authors":"papac","tags":["bowphp","php","framework"],"image":"https://avatars.githubusercontent.com/u/9353811?v=4","hide_table_of_contents":false}},"content":"import SuggestionFeature from \\"@site/src/components/Partials/SuggestionFeature\\";\\n\\nCe tutoriel a pour but de vous pr\xe9senter Bow Framework et les principes de base de l\u2019architecture MVC. Il vous montrera comment une application Bow Framework de base est construite \xe9tape par \xe9tape.\\n\\n\x3c!--truncate--\x3e\\n\\nDans ce tutoriel, vous allez cr\xe9er une application d\'actualit\xe9s de base. Vous commencerez par \xe9crire le code pouvant charger des pages statiques. Vous allez ensuite cr\xe9er une section de nouvelles qui lit les nouvelles d\'une base de donn\xe9es. Enfin, vous allez ajouter un formulaire pour cr\xe9er des \xe9l\xe9ments d\u2019actualit\xe9 dans la base de donn\xe9es.\\n\\nCe tutoriel portera principalement sur:\\n\\n- Principes de base de Model-View-Controller\\n- Bases du [routage](/routing)\\n- Validation du formulaire\\n- Effectuer des requ\xeates de base de base de donn\xe9es \xe0 l\'aide de \xabG\xe9n\xe9rateur de requ\xeates\xbb\\n\\nL\'ensemble du tutoriel est divis\xe9 en plusieurs partie, chacune expliquant une petite partie des fonctionnalit\xe9s de Bow Framework.\\n\\n- Introduction, cette partie, qui vous donne un aper\xe7u de ce \xe0 quoi vous attendre.\\n- Des pages statiques, qui vous apprendront les bases des contr\xf4leurs, des vues et du [routage](/routing).\\n- La section Nouvelles, o\xf9 vous commencerez \xe0 utiliser des mod\xe8les et effectuerez des op\xe9rations de base de base de donn\xe9es.\\n- Cr\xe9ez des \xe9l\xe9ments d\'actualit\xe9, qui introduiront des op\xe9rations de base de donn\xe9es plus avanc\xe9es et la validation des formulaires.\\n- Conclusion, qui vous donnera des indications sur des lectures compl\xe9mentaires et d\u2019autres ressources.\\n\\n## Des pages statiques\\n\\nRemarque: Ce tutoriel suppose que vous avez install\xe9 le [framework](/installation) dans votre environnement de d\xe9veloppement.\\n\\n### Exeminons le code par defaut dans le framework\\n\\nDans le code de base de l\'application, quand vous lancez le serveur de d\xe9veloppement. Rendez-vous sur le page `http://localhost:5000`.\\n\\n> Ici le port 5000 est celui par d\xe9faut dans l\'application.\\n\\nVous aurez une page d\'accueil pr\xe9sentant le framework. Alors cette page ne sort pas de nul part mais est stock\xe9 dans le dossier `templates` qui h\xe9berge tout les vues de votre application.\\n\\nDans ce dossier vous verez le fichier `layout.tintin.php` et `welcome.tintin.php` (Ne vous laissez par intimider par l\'extension `tintin.php`, nous allons revenir dessus dans la suite).\\n\\nDans le fichier `welcome.tintin.php`. Modifiez le contenu de la section comme ceci:\\n\\n```css\\n#block(\'content\')\\n  Ah, bow c\'est top.\\n#endblock\\n```\\n\\nEn actualisons la page. Normalement si tout c\'est bien pass\xe9 vous verrez le message `Ah, bow c\'est top.` affich\xe9.\\n\\n> D\xe9fi: Prenez le temps pour manipuler les vues et observer le fichier `routes/app.php` et `app/Controllers/WelcomeController`.\\n\\nDans le fichier `routes/app.php` vous avez certainement remarquer le contenu:\\n\\n```php\\n$app->get(\'/\', function () {\\n  return response()->view(\'welcome\');\\n});\\n```\\n\\nEn fait le `$app->get(\'/\')` c\'est qu\'on appel une route. et ensuite la fonction, le `function () {...` c\'est une action associ\xe9 \xe0 la route.\\n\\nDonc tout fois que dans le navigateur l\'utilisateur entrera la route **/**. L\'application Bow va d\xe9tect\xe9 la route correspondante et lanc\xe9 l\'action associ\xe9.\\n\\n> Cette fonction s\'appel le routage ou routing en anglais.\\n\\nAlors dans l\'action. Il y a une instruction et sera ex\xe9cut\xe9 en m\xeame temps que l\'action:\\n\\n```php\\nresponse()->view(\'welcome\');\\n```\\n\\nCette m\xe9thode en r\xe9alit\xe9 charge la vue `welcome` et et pour fini, l\'action renvoie la r\xe9ponse \xe0 l\'utilisateur.\\n\\nUn dernier truc avant de terminer cette section. Ajout ce morceau de code dans le fichier `route/app.php`:\\n\\n```php\\n$app->get(\'/:name\', function ($name) {\\n  return \\"Bonjour \\".$name;\\n});\\n```\\n\\nDans le navigateur entrons l\'url suivant `http://localhost:5000/franck`. Vous devrez voir afficher le contenu suivant `Bonjour franck`.\\n\\nIci vous remarquez certainement le `:name`. C\'est ce qu\'on l\'appel un param\xeatre url. Bow Framework ici capture la chaine qui est \xe0 la suite de `/` pour note cas c\'est `franck` et le sauvegarde dans une variable que vous pouvez utiliser en param\xe8tre de l\'action. C\'est super n\'est pas !\\n\\n### Cr\xe9ons notre premier contr\xf4leur\\n\\nAssez parl\xe9 on continue notre tutoriel. La premi\xe8re chose \xe0 faire est de configurer un contr\xf4leur pour g\xe9rer les pages statiques.\\n\\nUn contr\xf4leur est simplement une classe qui aide \xe0 d\xe9l\xe9guer le travail. C\'est le contre de votre application web.\\n\\n> Pour des contr\xf4leurs ? C\'est juste une question de bien organiser les choses et aussi de respecter le parten SRP (Single Responsibility Principle)\\n\\nPour ajouter une contr\xf4leur dans votre application vous pouvez utiliser l\'assistant `php bow` et ici nous allons cr\xe9er une contr\xf4leur nommer `ActualityController`.\\n\\n```bash\\nphp bow add:controller ActualityController\\n```\\n\\nNormalement vous devez avoir une contr\xf4leur `ActualityController` dans le dossier `app/Controller`. Regardons un peu son contenu:\\n\\n```php\\nnamespace App\\\\Controllers;\\n\\nuse App\\\\Controllers\\\\Controller;\\nuse Bow\\\\Http\\\\Request;\\n\\nclass ActualityController extends Controller\\n{\\n  //\\n}\\n```\\n\\n> Vous pouvez supprimer le contr\xf4leur `app\\\\Controllers\\\\WelcomeController` et l\'ignorer.\\n\\nEnsuite ajoutez une m\xe9thode dans le contr\xf4ler que nous allons appel\xe9 `showView`.\\nDonc notre contr\xf4leur deviendra:\\n\\n```php\\nnamespace App\\\\Controllers;\\n\\nuse App\\\\Controllers\\\\Controller;\\nuse Bow\\\\Http\\\\Request;\\n\\nclass ActualityController extends Controller\\n{\\n  /**\\n   * Show view page\\n   *\\n   * @return mixed\\n   */\\n  public function showIndex()\\n  {\\n\\n  }\\n}\\n```\\n\\nMaintenant que vous avez cr\xe9\xe9 votre premi\xe8re m\xe9thode, il est temps de cr\xe9er des mod\xe8les de page de base. Nous allons cr\xe9er deux \\"vues\\" (un layout) qui sera la page mod\xe8le et une page pour afficher la vue en temps que tel.\\n\\n> Supprimez le content du dossier `templates` sauf le dossier `errors`.\\n\\nCr\xe9ez la page principe (layout) dans **templates/layout.tintin.php** (Cette page existe peut \xeatre d\xe9j\xe0 par d\xe9faut):\\n\\n```html\\n<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Page Title</title>\\n  </head>\\n  <body>\\n    <p>Bienvenue sur mon site</p>\\n  </body>\\n</html>\\n```\\n\\n### Ajout de logique au contr\xf4leur\\n\\nPour l\'instant la m\xe9thode n\'accepte pas de param\xe8tre (dans la suite nous verrons comment injecter des informations \xe0 la m\xe9thode). Les vues statiques seront situ\xe9s dans le r\xe9pertoire `templates` (pour le rappel). Entrons le code suivant dans la fonction `showView`:\\n\\n```php\\npublic function showView()\\n{\\n  return view(\'layout\');\\n}\\n```\\n\\n### Routing\\n\\nNous avons parl\xe9 un temps soit peut des routes des applications.\\n\\nOuvrez le fichier de routage situ\xe9 dans `routes/app.php` et ajoutez les deux lignes suivantes. Supprimez tout autre code d\xe9finissant une route et ajoutons le code suivant:\\n\\n```php\\n$app->get(\'/\', \'ActualityController::showView\');\\n```\\n\\nPour rappel, Bow Framework lit ses r\xe8gles de routage de haut en bas et achemine la demande vers la premi\xe8re r\xe8gle correspondante. Chaque r\xe8gle est une expression r\xe9guli\xe8re (\xe0 gauche) mapp\xe9e sur un contr\xf4leur et un nom de m\xe9thode s\xe9par\xe9s par des \\"::\\" (\xe0 droite).\\n\\nLorsqu\'une requ\xeate arrive, Bow Framework recherche la premi\xe8re correspondance et appelle le contr\xf4leur et la m\xe9thode appropri\xe9s, \xe9ventuellement avec des arguments.\\n\\n> Vous trouverez plus d\'informations sur le routage dans la [documentation](/routing) de routage URI.\\n\\n## La section Nouvelles\\n\\nDans la derni\xe8re section, nous avons pass\xe9 en revue quelques concepts de base du Framework en \xe9crivant une classe qui comprend des pages statiques. Nous avons nettoy\xe9 l\'URI en ajoutant des r\xe8gles de routage personnalis\xe9es. Il est maintenant temps d\u2019introduire du contenu dynamique et de commencer \xe0 utiliser une base de donn\xe9es.\\n\\n### Mise en place de votre mod\xe8le\\n\\nAu lieu d\'\xe9crire les op\xe9rations de base de donn\xe9es directement dans le contr\xf4leur, les requ\xeates doivent \xeatre plac\xe9es dans un mod\xe8le afin de pouvoir \xeatre facilement r\xe9utilis\xe9es ult\xe9rieurement. Les mod\xe8les sont l\'endroit o\xf9 vous r\xe9cup\xe9rez, ins\xe9rez et mettez \xe0 jour des informations dans votre base de donn\xe9es ou dans d\'autres magasins de donn\xe9es. Ils repr\xe9sentent vos donn\xe9es.\\n\\nOuvrez le r\xe9pertoire `app/Models`, vous verrez un fichier `User.php` c\'est une mod\xe8le. Pour ajouter un mod\xe8le dans notre application nous allons utiliser `php bow`.\\n\\n```bash\\nphp bow add:model Actuality\\n```\\n\\n<SuggestionFeature />"}]}')}}]);